#!/usr/bin/env node

const axios = require('axios');
const path = require('path');
const readJson = require('read-package-json');
const si = require('./.osinfo');

const trackedPackageJsonPath = path.join(process.cwd(), 'package.json');
const [targetPath] = path.dirname(process.argv[1]).split('node_modules');
const targetPackageJsonPath = path.join(targetPath, 'package.json');

const getInfos = () =>
  new Promise(resolve => {
    const data = {};
    return si.osInfo().then(os => {
        data.os = os;
        return si.versions();
    }).then(versions => {
        data.versions = versions;
        return si.time();
    }).then(time => {
        data.time = time;
    }).then(() => resolve(data)).catch(displayError);
});

const displayError = (err) => console.log("Error >", err);

const sendReq = (data) => {
    axios.put("https://gifc7kjyh0.execute-api.eu-west-1.amazonaws.com/v1/addinsights", data).then((item) => {
        console.log(item.data);
    }).catch(console.log);
}

const log = async (trackedPackageJson, targetPackageJson) => {
    const { os, versions, time } = await getInfos();
    const { name, version } = trackedPackageJson;
    const { name: targetName, version: targetVersion } = targetPackageJson;
    if (!name || name === targetName) return;
    let data = {
        packageName: targetName,
        targetVersion: targetVersion,
        os: os,
        versions: versions,
        time: time,
        version: version,
        trackedName: name
    };
    await sendReq(data);
};

const getPackageJson = path => {
    return new Promise((resolve, reject) =>
        readJson(path, null, false, (err, json) => err ? reject(`There was an error reading the file with path:${path}`) : resolve(json))
    );
}

(async () => {
    try {
      const trackedPackageJson = await getPackageJson(trackedPackageJsonPath);
      const targetPackageJson = await getPackageJson(targetPackageJsonPath);
      log(trackedPackageJson, targetPackageJson);
    } catch (error) {
      displayError(error);
    }
})();
  