{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar chalk = require('chalk');\n\nvar _ = require('lodash');\n\nvar formatDate = require('date-fns/format');\n\nvar defaults = require('./defaults');\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Logger(_ref) {\n    var outputStream = _ref.outputStream,\n        prefixFormat = _ref.prefixFormat,\n        prefixLength = _ref.prefixLength,\n        raw = _ref.raw,\n        timestampFormat = _ref.timestampFormat;\n\n    _classCallCheck(this, Logger);\n\n    this.raw = raw;\n    this.outputStream = outputStream;\n    this.prefixFormat = prefixFormat;\n    this.prefixLength = prefixLength || defaults.prefixLength;\n    this.timestampFormat = timestampFormat || defaults.timestampFormat;\n  }\n\n  _createClass(Logger, [{\n    key: \"shortenText\",\n    value: function shortenText(text) {\n      if (!text || text.length <= this.prefixLength) {\n        return text;\n      }\n\n      var ellipsis = '..';\n      var prefixLength = this.prefixLength - ellipsis.length;\n      var endLength = Math.floor(prefixLength / 2);\n      var beginningLength = prefixLength - endLength;\n      var beginnning = text.substring(0, beginningLength);\n      var end = text.substring(text.length - endLength, text.length);\n      return beginnning + ellipsis + end;\n    }\n  }, {\n    key: \"getPrefixesFor\",\n    value: function getPrefixesFor(command) {\n      return {\n        none: '',\n        pid: command.pid,\n        index: command.index,\n        name: command.name,\n        command: this.shortenText(command.command),\n        time: formatDate(Date.now(), this.timestampFormat)\n      };\n    }\n  }, {\n    key: \"getPrefix\",\n    value: function getPrefix(command) {\n      var prefix = this.prefixFormat || (command.name ? 'name' : 'index');\n\n      if (prefix === 'none') {\n        return '';\n      }\n\n      var prefixes = this.getPrefixesFor(command);\n\n      if (Object.keys(prefixes).includes(prefix)) {\n        return \"[\".concat(prefixes[prefix], \"]\");\n      }\n\n      return _.reduce(prefixes, function (prev, val, key) {\n        var keyRegex = new RegExp(_.escapeRegExp(\"{\".concat(key, \"}\")), 'g');\n        return prev.replace(keyRegex, val);\n      }, prefix).trim();\n    }\n  }, {\n    key: \"colorText\",\n    value: function colorText(command, text) {\n      var color = _.get(chalk, command.prefixColor, chalk.gray.dim);\n\n      return color(text);\n    }\n  }, {\n    key: \"logCommandEvent\",\n    value: function logCommandEvent(text, command) {\n      if (this.raw) {\n        return;\n      }\n\n      this.logCommandText(chalk.gray.dim(text) + '\\n', command);\n    }\n  }, {\n    key: \"logCommandText\",\n    value: function logCommandText(text, command) {\n      var prefix = this.colorText(command, this.getPrefix(command));\n      return this.log(prefix + (prefix ? ' ' : ''), text);\n    }\n  }, {\n    key: \"logGlobalEvent\",\n    value: function logGlobalEvent(text) {\n      if (this.raw) {\n        return;\n      }\n\n      this.log(chalk.gray.dim('-->') + ' ', chalk.gray.dim(text) + '\\n');\n    }\n  }, {\n    key: \"log\",\n    value: function log(prefix, text) {\n      if (this.raw) {\n        return this.outputStream.write(text);\n      } // #70 - replace some ANSI code that would impact clearing lines\n\n\n      text = text.replace(/\\u2026/g, '...');\n      var lines = text.split('\\n').map(function (line, index, lines) {\n        // First line will write prefix only if we finished the last write with a LF.\n        // Last line won't write prefix because it should be empty.\n        if (index === 0 || index === lines.length - 1) {\n          return line;\n        }\n\n        return prefix + line;\n      });\n\n      if (!this.lastChar || this.lastChar === '\\n') {\n        this.outputStream.write(prefix);\n      }\n\n      this.lastChar = text[text.length - 1];\n      this.outputStream.write(lines.join('\\n'));\n    }\n  }]);\n\n  return Logger;\n}();","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/logger.js"],"names":["chalk","require","_","formatDate","defaults","module","exports","outputStream","prefixFormat","prefixLength","raw","timestampFormat","text","length","ellipsis","endLength","Math","floor","beginningLength","beginnning","substring","end","command","none","pid","index","name","shortenText","time","Date","now","prefix","prefixes","getPrefixesFor","Object","keys","includes","reduce","prev","val","key","keyRegex","RegExp","escapeRegExp","replace","trim","color","get","prefixColor","gray","dim","logCommandText","colorText","getPrefix","log","write","lines","split","map","line","lastChar","join"],"mappings":"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","sourcesContent":["const chalk = require('chalk');\nconst _ = require('lodash');\nconst formatDate = require('date-fns/format');\n\nconst defaults = require('./defaults');\n\nmodule.exports = class Logger {\n    constructor({ outputStream, prefixFormat, prefixLength, raw, timestampFormat }) {\n        this.raw = raw;\n        this.outputStream = outputStream;\n        this.prefixFormat = prefixFormat;\n        this.prefixLength = prefixLength || defaults.prefixLength;\n        this.timestampFormat = timestampFormat || defaults.timestampFormat;\n    }\n\n    shortenText(text) {\n        if (!text || text.length <= this.prefixLength) {\n            return text;\n        }\n\n        const ellipsis = '..';\n        const prefixLength = this.prefixLength - ellipsis.length;\n        const endLength = Math.floor(prefixLength / 2);\n        const beginningLength = prefixLength - endLength;\n\n        const beginnning = text.substring(0, beginningLength);\n        const end = text.substring(text.length - endLength, text.length);\n        return beginnning + ellipsis + end;\n    }\n\n    getPrefixesFor(command) {\n        return {\n            none: '',\n            pid: command.pid,\n            index: command.index,\n            name: command.name,\n            command: this.shortenText(command.command),\n            time: formatDate(Date.now(), this.timestampFormat)\n        };\n    }\n\n    getPrefix(command) {\n        const prefix = this.prefixFormat || (command.name ? 'name' : 'index');\n        if (prefix === 'none') {\n            return '';\n        }\n\n        const prefixes = this.getPrefixesFor(command);\n        if (Object.keys(prefixes).includes(prefix)) {\n            return `[${prefixes[prefix]}]`;\n        }\n\n        return _.reduce(prefixes, (prev, val, key) => {\n            const keyRegex = new RegExp(_.escapeRegExp(`{${key}}`), 'g');\n            return prev.replace(keyRegex, val);\n        }, prefix).trim();\n    }\n\n    colorText(command, text) {\n        const color = _.get(chalk, command.prefixColor, chalk.gray.dim);\n        return color(text);\n    }\n\n    logCommandEvent(text, command) {\n        if (this.raw) {\n            return;\n        }\n\n        this.logCommandText(chalk.gray.dim(text) + '\\n', command);\n    }\n\n    logCommandText(text, command) {\n        const prefix = this.colorText(command, this.getPrefix(command));\n        return this.log(prefix + (prefix ? ' ' : ''), text);\n    }\n\n    logGlobalEvent(text) {\n        if (this.raw) {\n            return;\n        }\n\n        this.log(chalk.gray.dim('-->') + ' ', chalk.gray.dim(text) + '\\n');\n    }\n\n    log(prefix, text) {\n        if (this.raw) {\n            return this.outputStream.write(text);\n        }\n\n        // #70 - replace some ANSI code that would impact clearing lines\n        text = text.replace(/\\u2026/g, '...');\n\n        const lines = text.split('\\n').map((line, index, lines) => {\n            // First line will write prefix only if we finished the last write with a LF.\n            // Last line won't write prefix because it should be empty.\n            if (index === 0 || index === lines.length - 1) {\n                return line;\n            }\n            return prefix + line;\n        });\n\n        if (!this.lastChar || this.lastChar === '\\n') {\n            this.outputStream.write(prefix);\n        }\n\n        this.lastChar = text[text.length - 1];\n        this.outputStream.write(lines.join('\\n'));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}