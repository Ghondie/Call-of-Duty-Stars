{"ast":null,"code":"'use strict';\n\nmodule.exports = parseJson;\n\nfunction parseJson(txt, reviver, context) {\n  context = context || 20;\n\n  try {\n    return JSON.parse(txt, reviver);\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      var isEmptyArray = Array.isArray(txt) && txt.length === 0;\n      var errorMessage = 'Cannot parse ' + (isEmptyArray ? 'an empty array' : String(txt));\n      throw new TypeError(errorMessage);\n    }\n\n    var syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i);\n    var errIdx = syntaxErr ? +syntaxErr[1] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;\n\n    if (errIdx != null) {\n      var start = errIdx <= context ? 0 : errIdx - context;\n      var end = errIdx + context >= txt.length ? txt.length : errIdx + context;\n      e.message += \" while parsing near '\".concat(start === 0 ? '' : '...').concat(txt.slice(start, end)).concat(end === txt.length ? '' : '...', \"'\");\n    } else {\n      e.message += \" while parsing '\".concat(txt.slice(0, context * 2), \"'\");\n    }\n\n    throw e;\n  }\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/json-parse-better-errors/index.js"],"names":["module","exports","parseJson","txt","reviver","context","JSON","parse","e","isEmptyArray","Array","isArray","length","errorMessage","String","TypeError","syntaxErr","message","match","errIdx","start","end","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AACA,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWJ,GAAX,EAAgBC,OAAhB,CAAP;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV,QAAI,OAAOL,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAMM,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcR,GAAd,KAAsBA,GAAG,CAACS,MAAJ,KAAe,CAA1D;AACA,UAAMC,YAAY,GAAG,mBACpBJ,YAAY,GAAG,gBAAH,GAAsBK,MAAM,CAACX,GAAD,CADpB,CAArB;AAEA,YAAM,IAAIY,SAAJ,CAAcF,YAAd,CAAN;AACD;;AACD,QAAMG,SAAS,GAAGR,CAAC,CAACS,OAAF,CAAUC,KAAV,CAAgB,sCAAhB,CAAlB;AACA,QAAMC,MAAM,GAAGH,SAAS,GACtB,CAACA,SAAS,CAAC,CAAD,CADY,GAEtBR,CAAC,CAACS,OAAF,CAAUC,KAAV,CAAgB,4BAAhB,IACAf,GAAG,CAACS,MAAJ,GAAa,CADb,GAEA,IAJF;;AAKA,QAAIO,MAAM,IAAI,IAAd,EAAoB;AAClB,UAAMC,KAAK,GAAGD,MAAM,IAAId,OAAV,GACZ,CADY,GAEZc,MAAM,GAAGd,OAFX;AAGA,UAAMgB,GAAG,GAAGF,MAAM,GAAGd,OAAT,IAAoBF,GAAG,CAACS,MAAxB,GACVT,GAAG,CAACS,MADM,GAEVO,MAAM,GAAGd,OAFX;AAGAG,MAAAA,CAAC,CAACS,OAAF,mCACEG,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,KADrB,SAEGjB,GAAG,CAACmB,KAAJ,CAAUF,KAAV,EAAiBC,GAAjB,CAFH,SAGEA,GAAG,KAAKlB,GAAG,CAACS,MAAZ,GAAqB,EAArB,GAA0B,KAH5B;AAKD,KAZD,MAYO;AACLJ,MAAAA,CAAC,CAACS,OAAF,8BAAgCd,GAAG,CAACmB,KAAJ,CAAU,CAAV,EAAajB,OAAO,GAAG,CAAvB,CAAhC;AACD;;AACD,UAAMG,CAAN;AACD;AACF","sourcesContent":["'use strict'\n\nmodule.exports = parseJson\nfunction parseJson (txt, reviver, context) {\n  context = context || 20\n  try {\n    return JSON.parse(txt, reviver)\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      const errorMessage = 'Cannot parse ' +\n      (isEmptyArray ? 'an empty array' : String(txt))\n      throw new TypeError(errorMessage)\n    }\n    const syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i)\n    const errIdx = syntaxErr\n    ? +syntaxErr[1]\n    : e.message.match(/^Unexpected end of JSON.*/i)\n    ? txt.length - 1\n    : null\n    if (errIdx != null) {\n      const start = errIdx <= context\n      ? 0\n      : errIdx - context\n      const end = errIdx + context >= txt.length\n      ? txt.length\n      : errIdx + context\n      e.message += ` while parsing near '${\n        start === 0 ? '' : '...'\n      }${txt.slice(start, end)}${\n        end === txt.length ? '' : '...'\n      }'`\n    } else {\n      e.message += ` while parsing '${txt.slice(0, context * 2)}'`\n    }\n    throw e\n  }\n}\n"]},"metadata":{},"sourceType":"script"}