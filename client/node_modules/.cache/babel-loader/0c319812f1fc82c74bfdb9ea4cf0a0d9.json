{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Rx = require('rxjs');\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(Command, [{\n    key: \"killable\",\n    get: function get() {\n      return !!this.process;\n    }\n  }]);\n\n  function Command(_ref) {\n    var index = _ref.index,\n        name = _ref.name,\n        command = _ref.command,\n        prefixColor = _ref.prefixColor,\n        killProcess = _ref.killProcess,\n        spawn = _ref.spawn,\n        spawnOpts = _ref.spawnOpts;\n\n    _classCallCheck(this, Command);\n\n    this.index = index;\n    this.name = name;\n    this.command = command;\n    this.prefixColor = prefixColor;\n    this.killProcess = killProcess;\n    this.spawn = spawn;\n    this.spawnOpts = spawnOpts;\n    this.error = new Rx.Subject();\n    this.close = new Rx.Subject();\n    this.stdout = new Rx.Subject();\n    this.stderr = new Rx.Subject();\n  }\n\n  _createClass(Command, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      var child = this.spawn(this.command, this.spawnOpts);\n      this.process = child;\n      this.pid = child.pid;\n      Rx.fromEvent(child, 'error').subscribe(function (event) {\n        _this.process = undefined;\n\n        _this.error.next(event);\n      });\n      Rx.fromEvent(child, 'close').subscribe(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            exitCode = _ref3[0],\n            signal = _ref3[1];\n\n        _this.process = undefined;\n\n        _this.close.next(exitCode === null ? signal : exitCode);\n      });\n      child.stdout && pipeTo(Rx.fromEvent(child.stdout, 'data'), this.stdout);\n      child.stderr && pipeTo(Rx.fromEvent(child.stderr, 'data'), this.stderr);\n      this.stdin = child.stdin;\n    }\n  }, {\n    key: \"kill\",\n    value: function kill(code) {\n      if (this.killable) {\n        this.killProcess(this.pid, code);\n      }\n    }\n  }]);\n\n  return Command;\n}();\n\nfunction pipeTo(stream, subject) {\n  stream.subscribe(function (event) {\n    return subject.next(event);\n  });\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/command.js"],"names":["Rx","require","module","exports","process","index","name","command","prefixColor","killProcess","spawn","spawnOpts","error","Subject","close","stdout","stderr","child","pid","fromEvent","subscribe","event","undefined","next","exitCode","signal","pipeTo","stdin","code","killable","stream","subject"],"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP;AAAA;;AAAA;AAAA;AAAA,wBACmB;AACX,aAAO,CAAC,CAAC,KAAKC,OAAd;AACH;AAHL;;AAKI,yBAAkF;AAAA,QAApEC,KAAoE,QAApEA,KAAoE;AAAA,QAA7DC,IAA6D,QAA7DA,IAA6D;AAAA,QAAvDC,OAAuD,QAAvDA,OAAuD;AAAA,QAA9CC,WAA8C,QAA9CA,WAA8C;AAAA,QAAjCC,WAAiC,QAAjCA,WAAiC;AAAA,QAApBC,KAAoB,QAApBA,KAAoB;AAAA,QAAbC,SAAa,QAAbA,SAAa;;AAAA;;AAC9E,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA,SAAKC,KAAL,GAAa,IAAIZ,EAAE,CAACa,OAAP,EAAb;AACA,SAAKC,KAAL,GAAa,IAAId,EAAE,CAACa,OAAP,EAAb;AACA,SAAKE,MAAL,GAAc,IAAIf,EAAE,CAACa,OAAP,EAAd;AACA,SAAKG,MAAL,GAAc,IAAIhB,EAAE,CAACa,OAAP,EAAd;AACH;;AAlBL;AAAA;AAAA,4BAoBY;AAAA;;AACJ,UAAMI,KAAK,GAAG,KAAKP,KAAL,CAAW,KAAKH,OAAhB,EAAyB,KAAKI,SAA9B,CAAd;AACA,WAAKP,OAAL,GAAea,KAAf;AACA,WAAKC,GAAL,GAAWD,KAAK,CAACC,GAAjB;AAEAlB,MAAAA,EAAE,CAACmB,SAAH,CAAaF,KAAb,EAAoB,OAApB,EAA6BG,SAA7B,CAAuC,UAAAC,KAAK,EAAI;AAC5C,QAAA,KAAI,CAACjB,OAAL,GAAekB,SAAf;;AACA,QAAA,KAAI,CAACV,KAAL,CAAWW,IAAX,CAAgBF,KAAhB;AACH,OAHD;AAIArB,MAAAA,EAAE,CAACmB,SAAH,CAAaF,KAAb,EAAoB,OAApB,EAA6BG,SAA7B,CAAuC,iBAAwB;AAAA;AAAA,YAAtBI,QAAsB;AAAA,YAAZC,MAAY;;AAC3D,QAAA,KAAI,CAACrB,OAAL,GAAekB,SAAf;;AACA,QAAA,KAAI,CAACR,KAAL,CAAWS,IAAX,CAAgBC,QAAQ,KAAK,IAAb,GAAoBC,MAApB,GAA6BD,QAA7C;AACH,OAHD;AAIAP,MAAAA,KAAK,CAACF,MAAN,IAAgBW,MAAM,CAAC1B,EAAE,CAACmB,SAAH,CAAaF,KAAK,CAACF,MAAnB,EAA2B,MAA3B,CAAD,EAAqC,KAAKA,MAA1C,CAAtB;AACAE,MAAAA,KAAK,CAACD,MAAN,IAAgBU,MAAM,CAAC1B,EAAE,CAACmB,SAAH,CAAaF,KAAK,CAACD,MAAnB,EAA2B,MAA3B,CAAD,EAAqC,KAAKA,MAA1C,CAAtB;AACA,WAAKW,KAAL,GAAaV,KAAK,CAACU,KAAnB;AACH;AApCL;AAAA;AAAA,yBAsCSC,IAtCT,EAsCe;AACP,UAAI,KAAKC,QAAT,EAAmB;AACf,aAAKpB,WAAL,CAAiB,KAAKS,GAAtB,EAA2BU,IAA3B;AACH;AACJ;AA1CL;;AAAA;AAAA;;AA6CA,SAASF,MAAT,CAAgBI,MAAhB,EAAwBC,OAAxB,EAAiC;AAC7BD,EAAAA,MAAM,CAACV,SAAP,CAAiB,UAAAC,KAAK;AAAA,WAAIU,OAAO,CAACR,IAAR,CAAaF,KAAb,CAAJ;AAAA,GAAtB;AACH","sourcesContent":["const Rx = require('rxjs');\n\nmodule.exports = class Command {\n    get killable() {\n        return !!this.process;\n    }\n\n    constructor({ index, name, command, prefixColor, killProcess, spawn, spawnOpts }) {\n        this.index = index;\n        this.name = name;\n        this.command = command;\n        this.prefixColor = prefixColor;\n        this.killProcess = killProcess;\n        this.spawn = spawn;\n        this.spawnOpts = spawnOpts;\n\n        this.error = new Rx.Subject();\n        this.close = new Rx.Subject();\n        this.stdout = new Rx.Subject();\n        this.stderr = new Rx.Subject();\n    }\n\n    start() {\n        const child = this.spawn(this.command, this.spawnOpts);\n        this.process = child;\n        this.pid = child.pid;\n\n        Rx.fromEvent(child, 'error').subscribe(event => {\n            this.process = undefined;\n            this.error.next(event);\n        });\n        Rx.fromEvent(child, 'close').subscribe(([exitCode, signal]) => {\n            this.process = undefined;\n            this.close.next(exitCode === null ? signal : exitCode);\n        });\n        child.stdout && pipeTo(Rx.fromEvent(child.stdout, 'data'), this.stdout);\n        child.stderr && pipeTo(Rx.fromEvent(child.stderr, 'data'), this.stderr);\n        this.stdin = child.stdin;\n    }\n\n    kill(code) {\n        if (this.killable) {\n            this.killProcess(this.pid, code);\n        }\n    }\n};\n\nfunction pipeTo(stream, subject) {\n    stream.subscribe(event => subject.next(event));\n}\n"]},"metadata":{},"sourceType":"script"}