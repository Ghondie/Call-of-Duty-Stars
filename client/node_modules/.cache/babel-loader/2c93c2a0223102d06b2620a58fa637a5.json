{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar _require = require('rxjs/operators'),\n    filter = _require.filter,\n    map = _require.map;\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function KillOthers(_ref) {\n    var logger = _ref.logger,\n        conditions = _ref.conditions;\n\n    _classCallCheck(this, KillOthers);\n\n    this.logger = logger;\n    this.conditions = _.castArray(conditions);\n  }\n\n  _createClass(KillOthers, [{\n    key: \"handle\",\n    value: function handle(commands) {\n      var _this = this;\n\n      var conditions = this.conditions.filter(function (condition) {\n        return condition === 'failure' || condition === 'success';\n      });\n\n      if (!conditions.length) {\n        return commands;\n      }\n\n      var closeStates = commands.map(function (command) {\n        return command.close.pipe(map(function (exitCode) {\n          return exitCode === 0 ? 'success' : 'failure';\n        }), filter(function (state) {\n          return conditions.includes(state);\n        }));\n      });\n      closeStates.forEach(function (closeState) {\n        return closeState.subscribe(function () {\n          var killableCommands = commands.filter(function (command) {\n            return command.killable;\n          });\n\n          if (killableCommands.length) {\n            _this.logger.logGlobalEvent('Sending SIGTERM to other processes..');\n\n            killableCommands.forEach(function (command) {\n              return command.kill();\n            });\n          }\n        });\n      });\n      return commands;\n    }\n  }]);\n\n  return KillOthers;\n}();","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/flow-control/kill-others.js"],"names":["_","require","filter","map","module","exports","logger","conditions","castArray","commands","condition","length","closeStates","command","close","pipe","exitCode","state","includes","forEach","closeState","subscribe","killableCommands","killable","logGlobalEvent","kill"],"mappings":";;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;eACwBA,OAAO,CAAC,gBAAD,C;IAAvBC,M,YAAAA,M;IAAQC,G,YAAAA,G;;AAEhBC,MAAM,CAACC,OAAP;AAAA;;AACI,4BAAoC;AAAA,QAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,QAAdC,UAAc,QAAdA,UAAc;;AAAA;;AAChC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBP,CAAC,CAACQ,SAAF,CAAYD,UAAZ,CAAlB;AACH;;AAJL;AAAA;AAAA,2BAMWE,QANX,EAMqB;AAAA;;AACb,UAAMF,UAAU,GAAG,KAAKA,UAAL,CAAgBL,MAAhB,CAAuB,UAAAQ,SAAS;AAAA,eAC/CA,SAAS,KAAK,SAAd,IACAA,SAAS,KAAK,SAFiC;AAAA,OAAhC,CAAnB;;AAKA,UAAI,CAACH,UAAU,CAACI,MAAhB,EAAwB;AACpB,eAAOF,QAAP;AACH;;AAED,UAAMG,WAAW,GAAGH,QAAQ,CAACN,GAAT,CAAa,UAAAU,OAAO;AAAA,eAAIA,OAAO,CAACC,KAAR,CAAcC,IAAd,CACxCZ,GAAG,CAAC,UAAAa,QAAQ;AAAA,iBAAIA,QAAQ,KAAK,CAAb,GAAiB,SAAjB,GAA6B,SAAjC;AAAA,SAAT,CADqC,EAExCd,MAAM,CAAC,UAAAe,KAAK;AAAA,iBAAIV,UAAU,CAACW,QAAX,CAAoBD,KAApB,CAAJ;AAAA,SAAN,CAFkC,CAAJ;AAAA,OAApB,CAApB;AAKAL,MAAAA,WAAW,CAACO,OAAZ,CAAoB,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,SAAX,CAAqB,YAAM;AACzD,cAAMC,gBAAgB,GAAGb,QAAQ,CAACP,MAAT,CAAgB,UAAAW,OAAO;AAAA,mBAAIA,OAAO,CAACU,QAAZ;AAAA,WAAvB,CAAzB;;AACA,cAAID,gBAAgB,CAACX,MAArB,EAA6B;AACzB,YAAA,KAAI,CAACL,MAAL,CAAYkB,cAAZ,CAA2B,sCAA3B;;AACAF,YAAAA,gBAAgB,CAACH,OAAjB,CAAyB,UAAAN,OAAO;AAAA,qBAAIA,OAAO,CAACY,IAAR,EAAJ;AAAA,aAAhC;AACH;AACJ,SANiC,CAAJ;AAAA,OAA9B;AAQA,aAAOhB,QAAP;AACH;AA9BL;;AAAA;AAAA","sourcesContent":["const _ = require('lodash');\nconst { filter, map } = require('rxjs/operators');\n\nmodule.exports = class KillOthers {\n    constructor({ logger, conditions }) {\n        this.logger = logger;\n        this.conditions = _.castArray(conditions);\n    }\n\n    handle(commands) {\n        const conditions = this.conditions.filter(condition => (\n            condition === 'failure' ||\n            condition === 'success'\n        ));\n\n        if (!conditions.length) {\n            return commands;\n        }\n\n        const closeStates = commands.map(command => command.close.pipe(\n            map(exitCode => exitCode === 0 ? 'success' : 'failure'),\n            filter(state => conditions.includes(state))\n        ));\n\n        closeStates.forEach(closeState => closeState.subscribe(() => {\n            const killableCommands = commands.filter(command => command.killable);\n            if (killableCommands.length) {\n                this.logger.logGlobalEvent('Sending SIGTERM to other processes..');\n                killableCommands.forEach(command => command.kill());\n            }\n        }));\n\n        return commands;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}