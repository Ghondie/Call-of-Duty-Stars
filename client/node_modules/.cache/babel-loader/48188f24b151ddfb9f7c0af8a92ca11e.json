{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Rx = require('rxjs');\n\nvar _require = require('rxjs/operators'),\n    bufferCount = _require.bufferCount,\n    map = _require.map,\n    switchMap = _require.switchMap,\n    take = _require.take;\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CompletionListener(_ref) {\n    var successCondition = _ref.successCondition,\n        scheduler = _ref.scheduler;\n\n    _classCallCheck(this, CompletionListener);\n\n    this.successCondition = successCondition;\n    this.scheduler = scheduler;\n  }\n\n  _createClass(CompletionListener, [{\n    key: \"listen\",\n    value: function listen(commands) {\n      var _this = this;\n\n      var closeStreams = commands.map(function (command) {\n        return command.close;\n      });\n      var allClosed = Rx.zip.apply(Rx, _toConsumableArray(closeStreams));\n      return Rx.merge.apply(Rx, _toConsumableArray(closeStreams)).pipe(bufferCount(closeStreams.length), map(function (exitCodes) {\n        switch (_this.successCondition) {\n          /* eslint-disable indent */\n          case 'first':\n            return exitCodes[0] === 0;\n\n          case 'last':\n            return exitCodes[exitCodes.length - 1] === 0;\n\n          default:\n            return exitCodes.every(function (exitCode) {\n              return exitCode === 0;\n            });\n\n          /* eslint-enable indent */\n        }\n      }), switchMap(function (success) {\n        return success ? Rx.of(null, _this.scheduler) : Rx.throwError(new Error(), _this.scheduler);\n      }), take(1)).toPromise();\n    }\n  }]);\n\n  return CompletionListener;\n}();","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/completion-listener.js"],"names":["Rx","require","bufferCount","map","switchMap","take","module","exports","successCondition","scheduler","commands","closeStreams","command","close","allClosed","zip","merge","pipe","length","exitCodes","every","exitCode","success","of","throwError","Error","toPromise"],"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;eAC8CA,OAAO,CAAC,gBAAD,C;IAA7CC,W,YAAAA,W;IAAaC,G,YAAAA,G;IAAKC,S,YAAAA,S;IAAWC,I,YAAAA,I;;AAErCC,MAAM,CAACC,OAAP;AAAA;;AACI,oCAA6C;AAAA,QAA/BC,gBAA+B,QAA/BA,gBAA+B;AAAA,QAAbC,SAAa,QAAbA,SAAa;;AAAA;;AACzC,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAJL;AAAA;AAAA,2BAMWC,QANX,EAMqB;AAAA;;AACb,UAAMC,YAAY,GAAGD,QAAQ,CAACP,GAAT,CAAa,UAAAS,OAAO;AAAA,eAAIA,OAAO,CAACC,KAAZ;AAAA,OAApB,CAArB;AACA,UAAMC,SAAS,GAAGd,EAAE,CAACe,GAAH,OAAAf,EAAE,qBAAQW,YAAR,EAApB;AACA,aAAOX,EAAE,CAACgB,KAAH,OAAAhB,EAAE,qBAAUW,YAAV,EAAF,CAA0BM,IAA1B,CACHf,WAAW,CAACS,YAAY,CAACO,MAAd,CADR,EAEHf,GAAG,CAAC,UAAAgB,SAAS,EAAI;AACb,gBAAQ,KAAI,CAACX,gBAAb;AACA;AACI,eAAK,OAAL;AACI,mBAAOW,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAxB;;AAEJ,eAAK,MAAL;AACI,mBAAOA,SAAS,CAACA,SAAS,CAACD,MAAV,GAAmB,CAApB,CAAT,KAAoC,CAA3C;;AAEJ;AACI,mBAAOC,SAAS,CAACC,KAAV,CAAgB,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,KAAK,CAAjB;AAAA,aAAxB,CAAP;;AACR;AAVA;AAYH,OAbE,CAFA,EAgBHjB,SAAS,CAAC,UAAAkB,OAAO;AAAA,eAAIA,OAAO,GACtBtB,EAAE,CAACuB,EAAH,CAAM,IAAN,EAAY,KAAI,CAACd,SAAjB,CADsB,GAEtBT,EAAE,CAACwB,UAAH,CAAc,IAAIC,KAAJ,EAAd,EAA2B,KAAI,CAAChB,SAAhC,CAFW;AAAA,OAAR,CAhBN,EAmBHJ,IAAI,CAAC,CAAD,CAnBD,EAoBLqB,SApBK,EAAP;AAqBH;AA9BL;;AAAA;AAAA","sourcesContent":["const Rx = require('rxjs');\nconst { bufferCount, map, switchMap, take } = require('rxjs/operators');\n\nmodule.exports = class CompletionListener {\n    constructor({ successCondition, scheduler }) {\n        this.successCondition = successCondition;\n        this.scheduler = scheduler;\n    }\n\n    listen(commands) {\n        const closeStreams = commands.map(command => command.close);\n        const allClosed = Rx.zip(...closeStreams);\n        return Rx.merge(...closeStreams).pipe(\n            bufferCount(closeStreams.length),\n            map(exitCodes => {\n                switch (this.successCondition) {\n                /* eslint-disable indent */\n                    case 'first':\n                        return exitCodes[0] === 0;\n\n                    case 'last':\n                        return exitCodes[exitCodes.length - 1] === 0;\n\n                    default:\n                        return exitCodes.every(exitCode => exitCode === 0);\n                /* eslint-enable indent */\n                }\n            }),\n            switchMap(success => success\n                ? Rx.of(null, this.scheduler)\n                : Rx.throwError(new Error(), this.scheduler)),\n            take(1)\n        ).toPromise();\n    }\n};\n"]},"metadata":{},"sourceType":"script"}