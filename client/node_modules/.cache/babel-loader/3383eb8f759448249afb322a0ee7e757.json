{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Rx = require('rxjs');\n\nvar _require = require('rxjs/operators'),\n    map = _require.map;\n\nvar defaults = require('../defaults');\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function InputHandler(_ref) {\n    var defaultInputTarget = _ref.defaultInputTarget,\n        inputStream = _ref.inputStream,\n        logger = _ref.logger;\n\n    _classCallCheck(this, InputHandler);\n\n    this.defaultInputTarget = defaultInputTarget || defaults.defaultInputTarget;\n    this.inputStream = inputStream;\n    this.logger = logger;\n  }\n\n  _createClass(InputHandler, [{\n    key: \"handle\",\n    value: function handle(commands) {\n      var _this = this;\n\n      if (!this.inputStream) {\n        return commands;\n      }\n\n      Rx.fromEvent(this.inputStream, 'data').pipe(map(function (data) {\n        return data.toString();\n      })).subscribe(function (data) {\n        var _data$split = data.split(':', 2),\n            _data$split2 = _slicedToArray(_data$split, 2),\n            targetId = _data$split2[0],\n            input = _data$split2[1];\n\n        targetId = input ? targetId : _this.defaultInputTarget;\n        input = input || data;\n        var command = commands.find(function (command) {\n          return command.name === targetId || command.index.toString() === targetId.toString();\n        });\n\n        if (command && command.stdin) {\n          command.stdin.write(input);\n        } else {\n          _this.logger.logGlobalEvent(\"Unable to find command \".concat(targetId, \", or it has no stdin open\\n\"));\n        }\n      });\n      return commands;\n    }\n  }]);\n\n  return InputHandler;\n}();","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/flow-control/input-handler.js"],"names":["Rx","require","map","defaults","module","exports","defaultInputTarget","inputStream","logger","commands","fromEvent","pipe","data","toString","subscribe","split","targetId","input","command","find","name","index","stdin","write","logGlobalEvent"],"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;eACgBA,OAAO,CAAC,gBAAD,C;IAAfC,G,YAAAA,G;;AAER,IAAMC,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP;AAAA;;AACI,8BAAyD;AAAA,QAA3CC,kBAA2C,QAA3CA,kBAA2C;AAAA,QAAvBC,WAAuB,QAAvBA,WAAuB;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AACrD,SAAKF,kBAAL,GAA0BA,kBAAkB,IAAIH,QAAQ,CAACG,kBAAzD;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AALL;AAAA;AAAA,2BAOWC,QAPX,EAOqB;AAAA;;AACb,UAAI,CAAC,KAAKF,WAAV,EAAuB;AACnB,eAAOE,QAAP;AACH;;AAEDT,MAAAA,EAAE,CAACU,SAAH,CAAa,KAAKH,WAAlB,EAA+B,MAA/B,EACKI,IADL,CACUT,GAAG,CAAC,UAAAU,IAAI;AAAA,eAAIA,IAAI,CAACC,QAAL,EAAJ;AAAA,OAAL,CADb,EAEKC,SAFL,CAEe,UAAAF,IAAI,EAAI;AAAA,0BACSA,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CADT;AAAA;AAAA,YACVC,QADU;AAAA,YACAC,KADA;;AAEfD,QAAAA,QAAQ,GAAGC,KAAK,GAAGD,QAAH,GAAc,KAAI,CAACV,kBAAnC;AACAW,QAAAA,KAAK,GAAGA,KAAK,IAAIL,IAAjB;AAEA,YAAMM,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAc,UAAAD,OAAO;AAAA,iBACjCA,OAAO,CAACE,IAAR,KAAiBJ,QAAjB,IACAE,OAAO,CAACG,KAAR,CAAcR,QAAd,OAA6BG,QAAQ,CAACH,QAAT,EAFI;AAAA,SAArB,CAAhB;;AAKA,YAAIK,OAAO,IAAIA,OAAO,CAACI,KAAvB,EAA8B;AAC1BJ,UAAAA,OAAO,CAACI,KAAR,CAAcC,KAAd,CAAoBN,KAApB;AACH,SAFD,MAEO;AACH,UAAA,KAAI,CAACT,MAAL,CAAYgB,cAAZ,kCAAqDR,QAArD;AACH;AACJ,OAjBL;AAmBA,aAAOP,QAAP;AACH;AAhCL;;AAAA;AAAA","sourcesContent":["const Rx = require('rxjs');\nconst { map } = require('rxjs/operators');\n\nconst defaults = require('../defaults');\n\nmodule.exports = class InputHandler {\n    constructor({ defaultInputTarget, inputStream, logger }) {\n        this.defaultInputTarget = defaultInputTarget || defaults.defaultInputTarget;\n        this.inputStream = inputStream;\n        this.logger = logger;\n    }\n\n    handle(commands) {\n        if (!this.inputStream) {\n            return commands;\n        }\n\n        Rx.fromEvent(this.inputStream, 'data')\n            .pipe(map(data => data.toString()))\n            .subscribe(data => {\n                let [targetId, input] = data.split(':', 2);\n                targetId = input ? targetId : this.defaultInputTarget;\n                input = input || data;\n\n                const command = commands.find(command => (\n                    command.name === targetId ||\n                    command.index.toString() === targetId.toString()\n                ));\n\n                if (command && command.stdin) {\n                    command.stdin.write(input);\n                } else {\n                    this.logger.logGlobalEvent(`Unable to find command ${targetId}, or it has no stdin open\\n`);\n                }\n            });\n\n        return commands;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}