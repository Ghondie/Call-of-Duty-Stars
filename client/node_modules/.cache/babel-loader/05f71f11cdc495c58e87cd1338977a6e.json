{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Alex\\\\Desktop\\\\project-3\\\\repo\\\\cod-tracker-auth\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar readPkg = require('read-pkg');\n\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ExpandNpmWildcard() {\n    var readPackage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : readPkg.sync;\n\n    _classCallCheck(this, ExpandNpmWildcard);\n\n    this.readPackage = readPackage;\n  }\n\n  _createClass(ExpandNpmWildcard, [{\n    key: \"parse\",\n    value: function parse(commandInfo) {\n      var _ref = commandInfo.command.match(/(npm|yarn) run (\\S+)([^&]*)/) || [],\n          _ref2 = _slicedToArray(_ref, 4),\n          npmCmd = _ref2[1],\n          cmdName = _ref2[2],\n          args = _ref2[3];\n\n      var wildcardPosition = (cmdName || '').indexOf('*'); // If the regex didn't match an npm script, or it has no wildcard,\n      // then we have nothing to do here\n\n      if (!cmdName || wildcardPosition === -1) {\n        return commandInfo;\n      }\n\n      if (!this.scripts) {\n        this.scripts = Object.keys(this.readPackage().scripts || {});\n      }\n\n      var preWildcard = _.escapeRegExp(cmdName.substr(0, wildcardPosition));\n\n      var postWildcard = _.escapeRegExp(cmdName.substr(wildcardPosition + 1));\n\n      var wildcardRegex = new RegExp(\"^\".concat(preWildcard, \"(.*?)\").concat(postWildcard, \"$\"));\n      return this.scripts.filter(function (script) {\n        return wildcardRegex.test(script);\n      }).map(function (script) {\n        return Object.assign({}, commandInfo, {\n          command: \"\".concat(npmCmd, \" run \").concat(script).concat(args),\n          name: script\n        });\n      });\n    }\n  }]);\n\n  return ExpandNpmWildcard;\n}();","map":{"version":3,"sources":["C:/Users/Alex/Desktop/project-3/repo/cod-tracker-auth/node_modules/concurrently/src/command-parser/expand-npm-wildcard.js"],"names":["_","require","readPkg","module","exports","readPackage","sync","commandInfo","command","match","npmCmd","cmdName","args","wildcardPosition","indexOf","scripts","Object","keys","preWildcard","escapeRegExp","substr","postWildcard","wildcardRegex","RegExp","filter","script","test","map","assign","name"],"mappings":";;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP;AAAA;;AACI,+BAAwC;AAAA,QAA5BC,WAA4B,uEAAdH,OAAO,CAACI,IAAM;;AAAA;;AACpC,SAAKD,WAAL,GAAmBA,WAAnB;AACH;;AAHL;AAAA;AAAA,0BAKUE,WALV,EAKuB;AAAA,iBACmBA,WAAW,CAACC,OAAZ,CAAoBC,KAApB,CAA0B,6BAA1B,KAA4D,EAD/E;AAAA;AAAA,UACNC,MADM;AAAA,UACEC,OADF;AAAA,UACWC,IADX;;AAEf,UAAMC,gBAAgB,GAAG,CAACF,OAAO,IAAI,EAAZ,EAAgBG,OAAhB,CAAwB,GAAxB,CAAzB,CAFe,CAIf;AACA;;AACA,UAAI,CAACH,OAAD,IAAYE,gBAAgB,KAAK,CAAC,CAAtC,EAAyC;AACrC,eAAON,WAAP;AACH;;AAED,UAAI,CAAC,KAAKQ,OAAV,EAAmB;AACf,aAAKA,OAAL,GAAeC,MAAM,CAACC,IAAP,CAAY,KAAKZ,WAAL,GAAmBU,OAAnB,IAA8B,EAA1C,CAAf;AACH;;AAED,UAAMG,WAAW,GAAGlB,CAAC,CAACmB,YAAF,CAAeR,OAAO,CAACS,MAAR,CAAe,CAAf,EAAkBP,gBAAlB,CAAf,CAApB;;AACA,UAAMQ,YAAY,GAAGrB,CAAC,CAACmB,YAAF,CAAeR,OAAO,CAACS,MAAR,CAAeP,gBAAgB,GAAG,CAAlC,CAAf,CAArB;;AACA,UAAMS,aAAa,GAAG,IAAIC,MAAJ,YAAeL,WAAf,kBAAkCG,YAAlC,OAAtB;AAEA,aAAO,KAAKN,OAAL,CACFS,MADE,CACK,UAAAC,MAAM;AAAA,eAAIH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CAAJ;AAAA,OADX,EAEFE,GAFE,CAEE,UAAAF,MAAM;AAAA,eAAIT,MAAM,CAACY,MAAP,CAAc,EAAd,EAAkBrB,WAAlB,EAA+B;AAC1CC,UAAAA,OAAO,YAAKE,MAAL,kBAAmBe,MAAnB,SAA4Bb,IAA5B,CADmC;AAE1CiB,UAAAA,IAAI,EAAEJ;AAFoC,SAA/B,CAAJ;AAAA,OAFR,CAAP;AAMH;AA7BL;;AAAA;AAAA","sourcesContent":["const _ = require('lodash');\nconst readPkg = require('read-pkg');\n\nmodule.exports = class ExpandNpmWildcard {\n    constructor(readPackage = readPkg.sync) {\n        this.readPackage = readPackage;\n    }\n\n    parse(commandInfo) {\n        const [, npmCmd, cmdName, args] = commandInfo.command.match(/(npm|yarn) run (\\S+)([^&]*)/) || [];\n        const wildcardPosition = (cmdName || '').indexOf('*');\n\n        // If the regex didn't match an npm script, or it has no wildcard,\n        // then we have nothing to do here\n        if (!cmdName || wildcardPosition === -1) {\n            return commandInfo;\n        }\n\n        if (!this.scripts) {\n            this.scripts = Object.keys(this.readPackage().scripts || {});\n        }\n\n        const preWildcard = _.escapeRegExp(cmdName.substr(0, wildcardPosition));\n        const postWildcard = _.escapeRegExp(cmdName.substr(wildcardPosition + 1));\n        const wildcardRegex = new RegExp(`^${preWildcard}(.*?)${postWildcard}$`);\n\n        return this.scripts\n            .filter(script => wildcardRegex.test(script))\n            .map(script => Object.assign({}, commandInfo, {\n                command: `${npmCmd} run ${script}${args}`,\n                name: script\n            }));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}